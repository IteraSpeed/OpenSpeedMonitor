# Move this file to one of the locations configured in config-setting grails.config.locations (see Config.groovy).
# One of that locations is ~/.grails/OpenSpeedMonitor-config.groovy
#
# Settings in this file will override defaults in grails-app/config!
#
# @author nkuhn
# @see Config.groovy
# @see http://grails.org/doc/latest/guide/conf.html#configExternalized
# Configure default app users (bootstrapped on first start if not already in db -> see Bootstrap.groovy)
grails:
  de:
    iteratec:
      osm:
        security:
          initialOsmAdminUser:
            username: [username-of-admin-user-to-be-bootsrapped]
            password: [password-of-admin-user-to-be-bootsrapped]
          initialOsmRootUser:
            username: [username-of-superadmin-user-to-be-bootsrapped]
            password: [password-of-superadmin-user-to-be-bootsrapped]
          test:
            geb:
              login: admin
              password: password
              #You can run the tets against a different osm instance. Only uncomment this if you want to run the tests against another instance
              #baseUrl: [your-osm-instance]
environments:
  development:
    grails:
      mail:
        disabled: true   # set this to true if you want to enable user registration and forgot passwort function
        host: 'localhost'
        port: 3025       # port 3025 is used by greenmail
      serverURL: "http://localhost:8080" #the server needs to know its URL to communicate with the microservice
      de.iteratec.osm.detailAnalysis:
        enablePersistenceOfDetailAnalysisData: false
        microserviceUrl: "[url to your DetailAnalysisService instance]"
        # if key contains special characters it must be quoted with single quotes, e.g. 'key-123'. It must NOT be quoted with ""!
        # apiKey should only have alphanumerical characters and dashes [a-zA-Z0-9\-]+
        apiKey: [apikey-for-communication-with-detailAnalysis-microservice]
    dataSource:
      # You can use jdbc proxy p6spy to intercept all sql statements to your relational database.
      # So you can see all prepared sql statements hibernate creates and fires against your data
      # with all the parameters replaced with the real query values.
      # @see https://github.com/p6spy/p6spy
      # url: jdbc:p6spy:mysql://localhost/[your-dev-mysql-scheme]
      # riverClassName: "com.p6spy.engine.spy.P6SpyDriver"
      #logSql: true
      url: "jdbc:mysql://localhost/osm"
      username: "[your-prod-mysql-user]"
      password: "[password-of-your-prod-mysql-user]"
      dbCreate: "managed by liquibase"
      driverClassName: "com.mysql.cj.jdbc.Driver"
      logSql: false
      pooled: true
      properties:
        minEvictableIdleTimeMillis: 60000
        timeBetweenEvictionRunsMillis: 5000
        numTestsPerEvictionRun: 3
        testOnBorrow: true
        testWhileIdle: true
        testOnReturn: false
        validationQuery: "SELECT 1"
  production:
    grails:
      serverURL: 'https://[base-url-of-your-prod-osm-instance]'
      de.iteratec.osm.detailAnalysis:
        enablePersistenceOfDetailAnalysisData: false
        microserviceUrl: "[url to your DetailAnalysisService instance]"
        # if key contains special characters it must be quoted with single quotes, e.g. 'key-123'. It must NOT be quoted with ""!
        # apiKey should only have alphanumerical characters and dashes [a-zA-Z0-9\-]+
        apiKey: [apikey-for-communication-with-detailAnalysis-microservice]
      mail:
        disabled: true # set this to true if you want to enable user registration and forgot passwort function
        #host: '[smtp.your.domain.com]'
        #port: 25
        #username: '[your username]'
        #password: '[your password]'
      #plugin:
        #springsecurity:
          #ui:
            #register:
              #defaultRoleNames: ["YourRoleName1","YourRoleName2"] # Roles every user gets during registration
              #emailBody: "Here you can define a custom email body. You can use <br> for new line and also use some grails variables such as $user.username and $url."
              #emailFrom: "Here you can define the from field in all sent emails [xyz@yourdomain.com]"
              #emailSubject: "Here you can define the email subject [New Account]"
            #forgotPassword:
              #emailBody: "Here you can define a custom email body. You can use <br> for new line and also use some grails variables such as $user.username and $url."
              #emailFrom: "Here you can define the from field in all sent emails [xyz@yourdomain.com]"
              #emailSubject: "Here you can define the email subject [Password Reset]"
    dataSource:
      url: "jdbc:mysql://localhost/[your-prod-mysql-scheme]"
      username: "[your-prod-mysql-user]"
      password: "[password-of-your-prod-mysql-user]"
      dbCreate: "managed by liquibase"
      driverClassName: "com.mysql.cj.jdbc.Driver"
      pooled: true
      properties:
        minEvictableIdleTimeMillis: 60000
        timeBetweenEvictionRunsMillis: 5000
        numTestsPerEvictionRun: 3
        testOnBorrow: true
        testWhileIdle: true
        testOnReturn: false
        validationQuery: "SELECT 1"
